{
  "hash": "2a4dd69cbb69a4fed29a087df87364be",
  "result": {
    "engine": "jupyter",
    "markdown": "# Quarto {#sec-quartoint}\n \n\n[Quarto](https://quarto.org) is an open source scientific and technical publishing system. It can be used to make a range of publishable outputs (reports, posters, slides, blogs, webpages dashboards etc.). In this section you will learn to use Quarto to write reports and  make slide decks. However, one of the advantages of learning Quarto is that it is straightforward to write and publish websites, blogs, dashboards and books.\n\nIt is assumed that you are using VSCode with Quarto from Apps Anywhere on the Uni machines. However, you are also encouraged to install Quarto/VSCode on your personal computer.\n\nQuarto documents are written using Markdown (you may have previously used RMarkdown). In the background, Quarto uses an open source document convertor called [Pandoc](https://pandoc.org/index.html). \n\n## Getting started\n\nVisual Studio code is a popular integrated development environment (IDE) that is used to write software.\n\n\nOn Apps Anywhere you can find an iteration of VS Code that  has Quarto, Python and Latex preinstalled. The app is called\n\n Visual Studio Code 1.92.2 with Quarto 1.5.56 extension\n\n\n\n## A first markdown document\n\nTo begin with, let's consider a simple markdown document.\n\n``` markdown\n<!-- Configuration information -->\n---\ntitle: \"Hello, Quarto\"\nformat: html\n---\n\n<!-- Insert content below -->\nThis is a Quarto document.\n\n```\n\nAt the top of a file we include a YAML block (enclosed by `---`). This provides configuration information for the document. \n\n\n::: {.callout-important}\n# Exercise\n\nTo run this code you should:\n\n1. Open the VisualStudio Code app.\n2. Create a new  `.qmd` file and save in a sensible directory.\n3. Copy and paste the above code into the .qmd file.\n4. \n    * Compile the code by clicking the preview on the top right of your VSCode editor.\n    ![Rendering a .qmd document](QuartoRenderButton.png)\n\n    OR\n\n    * Open a terminal, navigate to the directory and type\n    ``` bash\n    quarto render\n    quarto preview\n    ``` \n4. Have a look at the contents of the directory. You should be able to see that a .html file has been generated.\n5. Open the .html file in a web browser.\n:::\n\n\n## Creating a pdf\n\nOver the course of your project you will need to submit documents in pdf format. To get Quarto to generate a PDF,  you can edit the YAML information as follows.\n\n``` markdown\n---\ntitle: \"Hello, Quarto\"\nformat: pdf\n---\n\nThis is a Quarto document\n\n```\n\n\n:::{.callout-important}\n## Exercise\nRepeat the above compiling steps. You should now be able to see that a pdf file has been created in the directory alongside your .qmd file.\n\nIt is crucial that you can generate a pdf from your Quarto document as your final report will be submitted in pdf format. \n\nIt is advised to regularly check that  a pdf is generated when you render your Quarto document. I have noticed that with some bugs in Latex (more on this later), Quarto can render a document in .html format (it looks ok in preview) but be unable to generate a pdf.\n:::\n\n\n\n## Adding structure to your Quarto documents\n\nInformation on how to document structural elements to a document can be found on the [Quarto help pages](https://quarto.org/docs/authoring/markdown-basics.html). Below I will highlight some of the key document structures that you will likely need in your project.\n\n\n### Section headings\n\nBelow is some Quarto code that will generate a document with Section headings. \n\n\n``` markdown\n---\ntitle: \" Quarto sections\"\nformat: html\ncode-fold: True\n---\n\n# Main section \nThis is a Quarto document\n\n## Sub section title\nThis is a subsection\n\n### \nThis is a further subsection\n\n#\nThis is a new section\n\n##\n```\n\n::: {.callout-important}\n# Exercise \n\n* Create a new .qmd file in VS Code.\n* Copy and paste the above code.\n* Render the code and check that a .html file has been generated.\n* Add new section headings.\n* Generate a table of contents.\n:::\n\n\n### Tables\n\nTables can provide a concise way to present information. Typical uses in a report might be to gather information about model parameters or to display data.\n\nHere is an example of Quarto code to make a table:\n\n``` markdown\n| Parameter | Value | Unit  |\n|---------|:-----|------:|\n| $a$      | 1  |    ms$^{-1}$ |\n| $b$      | 2  |   s$^{-1}$  |\n| $c$        | 3    |     Nondim  |\n\n: Demonstration of  table\n```\n\nThe rendered version appears as\n\n| Parameter | Value | Unit  |\n|---------|:-----|------:|\n| $a$      | 1  |    ms$^{-1}$ |\n| $b$      | 2  |   s$^{-1}$  |\n| $c$        | 3    |     Nondim  |\n\n: Demonstration of  table\n\n\nYou can find more info. on Quarto tables [here](https://quarto.org/docs/authoring/tables.html).\n\n::: {.callout-important}\n# Exercise \n\n* Copy and paste the above table into your .qmd file.\n* Check that it renders.\n* Add another column to the table and render.\n* Add another row to the table and render.\n:::\n\n### Figures\n\nTo include an  image file in a Quarto document, you must firstly store the image file in a sensible directory. Suppose you store the image in the same directory as your .qmd file. Then you could include the figure ('DemoFigureMA40001.png') using the syntax: \n\n\n``` markdown\n![This is the figure caption.](DemoFigureMA40001.png)\n```\n\n![This is the figure caption.](DemoFigureMA40001.png)\n\n\n\n\nYou can find more info on Quarto figures [here](https://quarto.org/docs/authoring/figures.html).\n\n\n::: {.callout-important}\n# Exercise \n\n* Choose a .png file to include in your document.\n* Save the .png file in the same directory as your .qmd file.\n* Include the image and render your Quarto document.\n* Try to modify the image height and width.\n* Experiment with subfigures.\n:::\n\n### Cross referencing\n\nThroughout your document you will need to refer to different objects that you have created (e.g. Tables, Figures, equations, theorems).\n\nIn Quarto, objects are tagged using a specific syntax (prefix for that specific object + unique tag). See @tbl-syntax for some examples. Such objects can then be cross referenced using an `@' tag.\n\n\n| Object | Tag | Reference |\n|---------|:-----|------:|\n| Table      | `{#tbl-mytable}`  |    `@tbl-mytable` |\n| Figure     | `{#fig-myfigure}`  |   `@fig-myfigure`  |\n| Equation       | `{#eq-myequation}` | `@eq-myequation`   |\n: A table with syntax for referencing some Quarto objects. {#tbl-syntax}\n\n\n The table could be  tagged  as follows\n\n``` markdown\n| Parameter | Value | Unit  |\n|---------|:-----|------:|\n| $a$      | 1  |    ms$^{-1}$ |\n| $b$      | 2  |   s$^{-1}$  |\n| $c$        | 3    |     Nondim  |\n\n: Demonstration of  table {#tbl-parameters}\n```\n\n The tag can now be cross referenced using the tag (see @tbl-parameters).\n\n| Parameter | Value | Unit  |\n|---------|:-----|------:|\n| $a$      | 1  |    ms$^{-1}$ |\n| $b$      | 2  |   s$^{-1}$  |\n| $c$        | 3    |     Nondim  |\n\n: Demonstration of  table {#tbl-parameters}\n\n\n\nIn a similar manner we can cross reference an equation (see tag `#eq-emc2`). This is cross-referenced using the handle `@eq-emc2`.\n\n``` markdown\n$$\nE=mc^2\n$$ {#eq-emc2}\n```\n\nSo if I defined an equation\n$$\nE=mc^2,\n$$ {#eq-emc2}\nI can refer to it in the text via @eq-emc2.\n\n\n\n\nQuarto allows for definition and cross referencing of a range of [mathematical objects](https://quarto.org/docs/authoring/cross-references.html#theorems-and-proofs) (e.g. theorems, corollaries)\n\nYou can find out more about cross referencing [here](https://quarto.org/docs/authoring/cross-references.html).\n\n::: {.callout-important}\n# Exercise \n\n* Tag the table and figure that you made above.\n* Cross-reference them in your document.\n* Write down a theorem and cross reference it.\n:::\n\n\n### Citations and references\n\nIn your final report will need to provide a list of references that are cited at relevant points in your document.\n\nThis can be achieved relatively straightforwardly in Quarto.\n\nYou need to\n  1.  create a `.bib` file (e.g. `mybibliography.bib`) and save it in a sensible directory (e.g. alongside your .qmd files).\n\n  2. to populate the .bib file with bibliographic entries, each of which will have a unique tag (e.g. `my_bib_tag`)\n\n  3. in your `.qmd` file you can cite a reference using  the `@' handle (e.g. `@my_bib_tag').\n\n\nYou can find out more about citations in Quarto [here](https://quarto.org/docs/authoring/citations.html).\n\n\n\n\n::: {.callout-note}\n# Creating a .bib file\n\nYou could use a reference manager such as Mendeley or Jabref.\n\nAlternatively, you \n\n - go to [google scholar](https://scholar.google.com).\n - go to settings [tab](https://scholar.google.com/scholar_settings?sciifh=1&hl=en&as_sdt=0,5)\n - In the Bibliography manager, select -> *Show links to import citations into* Bibtex\n- Now when you search for a paper/textbook in Google scholar, there should be an additional link: 'import into Bibtex' \n- Copy and paste the contents in the link into your .bib file\n- Cite the source in your Quarto document.\n\n:::\n\n\n### Schematic diagrams\nYou can learn how to make diagrams [here](https://quarto.org/docs/authoring/diagrams.html). Here is an example:\n\n\n```` markdown\n```{mermaid}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n```\n\n````\n\n\n\n## Appendices\n\n### Submitting code\n\nIn your final report you should include codes that you have developed in the appendix. You can do this using a *code block*.\n\n\n````\n\n``` markdown\nCopy and paste code here\n```\n````\n\n\n\n## Websites and blogs in Quarto\n\nGiven what you have achieved thus far, it is not a very big step to generate a Quarto project (e.g. books, blogs and dashboards). \n\nYou can create a project template on VSCode using *File->NewFile-> Quarto Project*.\n\nThe main difference with what we have previously done is that the configuration information is now defined in a *.yaml* file. See image below for an example.\n\n![](QuartoProjectYAML.png)\n\nTo render a Quarto project you need to use the terminal:\n\n\n\n\n\n\n```{terminal}\nquarto render\n```\n\n\n\n\n\n\nNote that in the template projects the html and pdf formats are rendered together. The pdf is stored in the directory *docs*  (this is specified in the .yaml file).\n\n## Quarto Publishing\n\nGiven what you have achieved thus far, it is straightforward to publish Quarto output on the web.\n\nThere are some tutorials available on how to do this on the Quarto [pages](https://quarto.org/docs/websites/).\n\n\n\nFor guidance on publishing material see [here](https://quarto.org/docs/publishing/).\n\n",
    "supporting": [
      "QuartoIntroduction_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}