---
title: " Code development"
format:
  html:
    code-fold: true
  pdf:
    code-fold: true    
jupyter: python3
---


## Introduction
It is strongly encouraged that you make use of opportunities to use and develop computer programs over the course of your project. You should discuss programming with your project supervisor. 

In this section we will develop some Python codes. Python has been chosen because it:

- is versatile (there are lots of existing libraries to explore);
- is open source (you will have free access to it after you graduate);
- it can be easily embedded within Quarto;
- is used across industry and academia.

It is, of course, fine if you wish to use other programming languages in your project.




::: {.callout-note}
# Note:

On the Uni machines Quarto has been set up so that it interfaces to an installation of Python with some preinstalled libraries. To set up on your own machine you will need to install Python, create a Python environment and interface with Quarto (Show and Run Commands -> Select Python Interpreter).

:::


## Some key ideas


### Python in Quarto

To run Python within Quarto, create a python environment as follows:

````markdown

```{{python}} 

# Insert Python code here.

```
````

Note that a simialr syntax is used to embed codes in other open source languages (R and Julia).

### Calculator

We can use Python as a simple calculator.
```{python}

x=1
y=2

z=x+y
print(z)

```

### Datatypes

It is worth having a concept of different `datatypes' before you start progamming.  In Python, some of the key datatypes are:

- float (decimals)
- int integers
- str (string of text)
- boolean (logical)

In Python, we not explicitly declare a datatype (the interpreter figures this out based upon the variable that has been defined). See code below for an example.



```{python}

# Define an integer

a=8

# Define a floating point number

b=16.25

# Define a string

s='Arsenal FC'


# print out  the datatype

print(type(a))
print(type(b))
print(type(s))


# Define some bollean variables
boolean_variable_1=True
boolean_variable_2=False

boolean_variable_and=boolean_variable_1*boolean_variable_2

assert(boolean_variable_and==False)

```


### Containers 

Python comes with some default containers:

- Lists
- Tuples
- Sets
- Dictionaries

These have different uses.


#### Lists

Lists are mutable, i.e. they can be modified within the code.
```{python}

# Define a list
mylist=[1,2,3]

# Print to screen
print(mylist)

# Look at the 0th entry
print(mylist[0])


# Define a new list
mylist2=['a','b','c']

# Print to screen
print(mylist2)
# Print the 0th entry to screen
print(mylist2[0])

# Change one of the elements ... it is mutable
mylist2[1]='d'

#Print to screen
print(mylist2)

```
#### Tuples

Tuples are immutable container type, i,
```{python}

mytuple=(1,2,3)

print(mytuple)

print(mytuple[0])

mytuple2=('a','b','c')

print(mytuple2)

print(mytuple2[0])
```

#### Sets


Sets are denoted with curly brackets and behave like mathematical sets. 

They are not indexed and there are no repeated entries.
```{python}

myset={1,2,3}

print(myset)


myset2={'a','b','c','a'}

print(myset2)

```

#### Dictionaries


Dictionaries are used to interface  datatypes that are connected. The first entry is known as the *key*.

Suppose  John, Helen and Carol have been assigned projects 1,2 and 3, respectively. I could use a dictionary to connect these pieces of data.


```{python}

mydictionary={'John':1, 'Helen':2,'Carol':3}

print(mydictionary)

print('Helen\'s project is')
print(mydictionary['Helen'])

```


### Logical statements and control loops

Logical statments and loops are essential in any programming language.

It is essential to be competent using for loops and if statements.
Note the positioning of the colon and the indentation in the code example below.

```{python}

for i in range(5):
  print(i)

```

Suppose we only wish to print out i when it is greater than 3 in the above code. We could introduce an if statement (note colon +indentation again).

```{python}

for i in range(5):
  if (i>3):
    print(i)

```

Python has niceer ways to loop over containers (lists, arrays etc.) but this is enough for now.



### Writing functions

A good rule of thumb is that if you find yourself using the same piece of code three or more times, you should write a function (module). This avoids duplication of code.

Suppose we find ourselves manually computing the sum of positive integers many times, i.e.
$$ 
s_2=0+1+2=3
$$
and
$$ 
s_3=0+1+2+3=6.
$$

It makes sense to write a function that computes the sum for arbitrary $n$. Then we call that function when needed. This way the logic of the function is only written out in one place.



```{python}
# Define a function
def sum_integers(n):
  sum_int=0
  for i in range(n):
    sum_int=sum_int+i
  return sum_int

# The old way might eb to manually write out the sum
s_1=0+1
s_2=0+1+2
s_3=0+1+2+3


# instead we call a function 

s_function_3=sum_integers(3)
print(s_function_3)

s_function_120=sum_integers(120)
print(s_function_120)



```



### Code debugging

You will have bugs in your code! And it can be incredibly frustrating trying to find them!

There are three main types of bugs:

* syntax errors (e.g. not calling a function correctly)
* runtime errors (e.g. dividing by zero)
* logic errors (more fundamental problems with the algorithm)


Can you find the bug in this piece of code?
``` python

sum=0.0
for i in range(5)
  sum=sum+i

```

What about here?
``` python

for i in range(5):
sum=sum+i

```

### Good code hygiene
- Plan your code
- Keep code clean (e.g. use variables, write expressions that are easy to interpret)
- Test code often
- Develop code on simple cases where you know what the answer should be
- Comment code


### Some tipds fpr dealing with bugs 

1.  read the error message in terminal. Try to find the earliest sign of a problem in readout. This will tell you what line of your code is causing the first problem. 

2. print variables to screen - do they have the 

3. check datatypes - are the objects you have defined doing what you think they are (e.g. if it is a matrix, does it have the expected shape)

4. if you are calling a function, is the syntax correct (hover over the function or google 'python +  name of the function'). Usually there are working examples at the bottom of the help page.

5. Python has a debugger that lets you follow the program as it executes.



## Python libraries

### Essential 

#### Matrix computation (numpy)

[Numpy](https://numpy.org) is a widely used Python libary. It is a standard way to use arrays in Python. Numpy also contains lots of algorithm (e.g. linear algebra, calculus, mathematical functions, integration, random number generation etc.). You can find a beginner's guide [here](https://numpy.org/doc/stable/user/absolute_beginners.html).

Numpy provides tools for calculating many mathematical operations.

```{python}
import numpy as np

x=3.14
y=np.sin(x)


print('sin (3.14) is: ' )
print(y)

assert(np.abs(y)<0.1)

z=np.pi
p=np.sin(z)

assert(np.abs(p)<0.00001)

print(p)

```


We can also use numpy to define and manipulate arrays. In the example below we use python lists to define two 1D arrays. 



``` {python}
import numpy as np

# Define a numpy array
a = np.array([1, 2, 3, 4, 5, 6])
b=np.array([7,8,9,10,11,12])
print(a)

c=a+b
print('The sum of a and b is:')
print(c)

print("The first entry in a is")
a[0]
```




We can  use numpy for higher dimensional arrays

Calculate the determinant of the 2x2 matrix
$$
A=\begin{pmatrix}
4 & 3 \\
2 & 1
\end{pmatrix}.
$$


```{python}
import numpy as np

# generate a two by two matrix of zeros
A=np.zeros((2,2))

# Set values as per questions

A[0,0]=4
A[0,1]=3
A[1,0]=2
A[1,1]=1

# Print A out to check it is correct
print('The matrix is:')
print(A)

# Compute the determinant
determinant=np.linalg.det(A)

print('The determinant is:')
print(determinant)


# Formally check that the answer is correct.
assert(determinant==-2.0)



```

1. Compute the trace of the matrix $A$.
2. Compute the determinant of the $3 \times 3$ matrix
$$
B=\begin{pmatrix}
4 & 3& 2 \\
2 & 1 & 4 \\
3 & 2 & 1
\end{pmatrix}.
$$
3. Compute the eigenvalues of $B$.


#### Plotting (matplotlib)

[Matplotlib](https://matplotlib.org/stable/users/explain/quick_start.html#a-simple-example) is a pyton library for plotting.

Let's plot some well-known functions.

Suppose we wish to plot the function
$$
f(x)=x^2, \ \ x \in[0,2].
$$

```{python}
#import python libraries
import matplotlib.pyplot as plt
import numpy as np
# define x
x=np.linspace(0,2,200)

# Now define the funciton of x

f=x**2

# Now plot the function

# Generate a figure ane an axis
fig,ax=plt.subplots()

# call the plot function to plot the data
ax.plot(x,f)

# Set the x and y labels
ax.set_xlabel('$x$')
ax.set_ylabel('$f(x)$')
```

Exercises:

 1. Change the domain to $$x\in[0,4]$$.
 2. Plot the function $$f(x)=\sin(x) $$.
 3. Create two subplots.
 4. Make the font on the labels larger
 5. Add a legend to the figures.


#### Symbolic computation in Python (sympy)


###  Python libraries of interest to particular projects


### Numerically solving differential equations (sci-py)
 
#### ODEs

#### PDEs

### Optimisation (skikit-learn)

### Data analysis (pandas)

### Machine learning (tensorflow)

### Image analysis (skikit-image)


## Writing your own scripts

At some point (either over the course of your project or later) you will likely encounter a  problem that cannot be solved using existing code libraries, i.e. you will need to write your own progammes. To prepare for this day, it is a good idea to practice your code development skills on problems where the solution are already known.
Over the course of project assessment you will be asked about the methods that you have used in your project. It is much easier to defend the use of a method if you have a clear idea how to programme it; then the limitations of a method become much clearer. You can also include any code that you develop in the  appendices of your written report.




















