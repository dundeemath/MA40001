{
  "hash": "25bca658b5f619a2591f754c6757581c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \" Code development\"\nformat:\n  html:\n    code-fold: true\n  pdf:\n    code-fold: true    \njupyter: python3\n---\n\n\n\n\n\n\n\n## Introduction\nIt is strongly encouraged that you make use of opportunities to use and develop computer programs over the course of your project. You should discuss programming with your project supervisor. \n\nIn this section we will develop some Python codes. Python has been chosen because it:\n\n- is versatile (there are lots of existing libraries to explore);\n- is open source (you will have free access to it after you graduate);\n- it can be easily embedded within Quarto;\n- is used across industry and academia.\n\nIt is, of course, fine if you wish to use other programming languages in your project.\n\n::: {.callout-note}\n# Note:\n\nOn the Uni machines Quarto has been set up so that it interfaces to an installation of Python with some pre-installed libraries. To set up on your own machine you will need to install Python, create a Python environment and interface with Quarto (Show and Run Commands -> Select Python Interpreter).\n\n:::\n\n\n## Some key ideas\n\n### Python in Quarto\n\nTo run Python within Quarto, create a new .qmd file. Within the file create a python environment as follows:\n\n````markdown\ntitle: \" Code development\"\nformat: html\n\n\n# Python code\n```{{python}} \n\n# Insert Python code here.\n\n```\n````\n\nNote that a similar syntax is used to embed codes in other open source languages (R and Julia).\n\n### Calculator\n\nWe can use Python as a simple calculator.\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n:::{.callout-important}\n## Exercise\nUse Python to compute the product of 157 and 213.\n\n:::\n\n### Datatypes\n\nIt is worth having a concept of different `datatypes' before you start progamming.  In Python, some of the key datatypes are:\n\n- float (decimals)\n- int integers\n- str (string of text)\n- boolean (logical)\n\nIn Python, we do not explicitly declare a datatype (the interpreter figures this out based upon the variable that has been defined). See code below for an example.\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n<class 'float'>\n<class 'str'>\n```\n:::\n:::\n\n\n:::{.callout-important}\n## Exercise\n\nDefine a float and integer (e.g. $x=2.0$ and $y=7$).\n\nWhat datatype is the product?\n\n:::\n\n\n### Containers \n\nPython comes with some default containers:\n\n- Lists\n- Tuples\n- Sets\n- Dictionaries\n\nThese have different uses.\n\n\n#### Lists\n\nLists are mutable, i.e. they can be modified within the code. Note that Python indexing starts at zero!\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3]\n1\n['a', 'b', 'c']\na\n['a', 'd', 'c']\n```\n:::\n:::\n\n\n:::{.callout-important}\n## Exercise\n\n1. Create a list of five integers.\n\n2. Sort the list in order of increasing size.\n\n3. What happens if you try to access the `6th' entry in the list?\n\n4. Append another entry to the list.\n\n:::\n\n#### Tuples\n\nTuples are immutable container types, i.e.\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3)\n1\n('a', 'b', 'c')\na\n```\n:::\n:::\n\n\n#### Sets\n\n\nSets are denoted with curly brackets and behave like mathematical sets. \n\nThey are not indexed and there are no repeated entries.\n\n::: {.cell execution_count=5}\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3}\n{'b', 'c', 'a'}\n```\n:::\n:::\n\n\n:::{.callout-important}\n## Exercise\n\n1. Create a set of floating point numbers.\n2. Add another entry to the set.\n3. Try to add an entry that already exists in the set.\n4. Compute the number of items in the set.\n:::\n\n#### Dictionaries\n\n\nDictionaries are used to interface  datatypes that are connected. The first entry is known as the *key*.\n\nSuppose  John, Helen and Carol have been assigned projects 1,2 and 3, respectively. I could use a dictionary to connect these pieces of data as follows:\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-stdout}\n```\n{'John': 1, 'Helen': 2, 'Carol': 3}\nHelen's project is\n2\n```\n:::\n:::\n\n\n:::{.callout-important}\n## Exercise\n\n1. Create  a dictionary that connects your connects your modules codes for this semester with the module title ().\n2. Access the module title using the module code as per the example.\n:::\n\n### Logical statements and control loops\n\n\n\nIt is essential to be competent using logical statements statements in any programming language. Here we will consider for loops and if statements.\n\n\nNote the positioning of the colon and the indentation in the code example below:\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\n:::{.callout-important}\n## Exercise\n\nWrite a for loop that loops over one of the lists that you defined above and prints each item to screen. \n\n\n:::\n\n\n\nSuppose we only wish to print out $i$ when it is greater than three in the above code. We could introduce an if statement as follows (note colon  and indentation again):\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n\nNote nested indentation of the for loop and if statement!\n\n:::{.callout-important}\n## Exercise\n\nModify the above for loop as follows.\nWrite an if statement within the for loop so that only certain entries in the list get printed out.\n:::\n\n\nPython has nicer/more efficient ways to loop over containers (lists, arrays etc.) but this is enough for now.\n\n\n\n### Writing functions\n\nA good rule of thumb is that if you find yourself using the same piece of code three or more times, you should write a function (module). This avoids duplication of code.\n\nSuppose we find ourselves manually computing the sum of positive integers many times, i.e.\n$$ \ns_2=0+1+2=3\n$$\nand\n$$ \ns_3=0+1+2+3=6.\n$$\n\nIt makes sense to write a function that computes the sum for arbitrary $n$. Then we call that function when needed. This way the logic of the function is only written out in one place.\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n7140\n```\n:::\n:::\n\n\n:::{.callout-important}\n## Exercise\n\nWrite a function that takes a list as an agrument and prints out the entries using a for loop. \n\n:::\n\n\n\n### Code debugging\n\nYou will have bugs in your code! And it can be incredibly frustrating trying to find them!\n\nThere are three main types of bugs:\n\n* syntax errors (e.g. not calling a function correctly)\n* runtime errors (e.g. dividing by zero)\n* logic errors (more fundamental problems with the algorithm)\n\n\nCopy and past the code snippets below into the python environment in Quarto. Can you find the bugs?\n\n\n::: {.callout-important}\n# Exercise\n\n\n``` python\n\nsum=0.0\nfor i in range(5)\n  sum=sum+i\n\n```\n:::\n\n\n::: {.callout-important}\n# Exercise\n``` python\n\nfor i in range(5):\nsum=sum+i\n\n```\n:::\n\n::: {.callout-important}\n# Exercise\nWhat about here?\n``` python\n\nsum=0.0\nfor i in range(5):\n  sum=(sum+i)/i\n\n```\n:::\n\n### Good code hygiene\n- Plan your code\n- Keep code clean (e.g. use variables, write expressions that are easy to interpret)\n- Test code often\n- Develop code on simple cases where you know what the answer should be\n- Comment code\n\n\n### Some tips for dealing with bugs \n\n1.  read the error message in terminal. Try to find the earliest sign of a problem in readout. This will tell you what line of your code is causing the first problem. \n\n2. print variables to screen - do they have the expected datatypes/values?\n\n3. check datatypes - are the objects you have defined doing what you think they are (e.g. if it is a matrix, does it have the expected shape)\n\n4. if you are calling a function, is the syntax correct (hover the pointer over the function in VSCode or google 'python +  name of the function'). Use the working example, usually found at the bottom of the help pages, to ensure syntax is correct. Do you understand what kind of objects the functions is going to return?\n\n5. Test your code on a problem where you know the answer. \n\n6. Python has a debugger that lets you follow the program as it executes.\n\n\n\n## Python libraries\n\n### Essential \n\n#### Matrix computation (numpy)\n\n[Numpy](https://numpy.org) is a widely used Python libary. It is a standard way to use arrays in Python. Numpy also contains lots of algorithm (e.g. linear algebra, calculus, mathematical functions, integration, random number generation etc.). You can find a beginner's guide [here](https://numpy.org/doc/stable/user/absolute_beginners.html).\n\nNumpy provides tools for calculating many mathematical operations.\n\n::: {.cell execution_count=10}\n\n::: {.cell-output .cell-output-stdout}\n```\nsin (3.14) is: \n0.0015926529164868282\n1.2246467991473532e-16\n```\n:::\n:::\n\n\nWe can also use numpy to define and manipulate arrays. In the example below we use python lists to define two 1D arrays. \n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4 5 6]\nThe sum of a and b is:\n[ 8 10 12 14 16 18]\nThe first entry in a is\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n1\n```\n:::\n:::\n\n\nWe can  use numpy for higher dimensional arrays\n\nCalculate the determinant of the 2x2 matrix\n$$\nA=\\begin{pmatrix}\n4 & 3 \\\\\n2 & 1\n\\end{pmatrix}.\n$$\n\n::: {.cell execution_count=12}\n\n::: {.cell-output .cell-output-stdout}\n```\nThe matrix is:\n[[4. 3.]\n [2. 1.]]\nThe determinant is:\n-2.0\n```\n:::\n:::\n\n\n::: {.callout-important}\n# Exercise\n\n1. Compute the trace of the matrix $A$.\n2. Compute the determinant of the $3 \\times 3$ matrix\n$$\nB=\\begin{pmatrix}\n4 & 3& 2 \\\\\n2 & 1 & 4 \\\\\n3 & 2 & 1\n\\end{pmatrix}.\n$$\n3. Compute the eigenvalues of $B$.\n\n:::\n\n\n#### Plotting (matplotlib)\n\n[Matplotlib](https://matplotlib.org/stable/users/explain/quick_start.html#a-simple-example) is a pyton library for plotting.\n\nLet's plot some well-known functions.\n\nSuppose we wish to plot the function\n$$\nf(x)=x^2, \\ \\ x \\in[0,2].\n$$\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-display}\n![](Python_files/figure-pdf/cell-14-output-1.pdf){}\n:::\n:::\n\n\n::: {.callout-important}\n# Exercise\n\n 1. Change the domain to $x\\in[0,4]$.\n 2. Plot the function $f(x)=\\sin(x)$.\n 3. Create two subplots.\n 4. Make the font on the labels larger\n 5. Add a legend to the figures.\n\n:::\n\n\n#### Symbolic computation in Python (sympy)\n\n\n[sympy](https://www.sympy.org/en/index.html) provides a symbolic calculator in Python. For example, suppose I want to differentiate or integrate the function\n$$\nf(x)=x^3.\n$$\n\n::: {.cell execution_count=14}\n\n::: {.cell-output .cell-output-stdout}\n```\nThe derivative is\n3*x**2\nThe derivative evaluated at x=1 is\n3\n```\n:::\n:::\n\n\n::: {.callout-important}\n# Exercise\n\nUse sympy to compute the integral\n$$\n\\int_0^1 x^3 dx.\n$$\n:::\n\n\n#### scipy\n\n[Scipy](https://docs.scipy.org/doc/scipy/tutorial/index.html#user-guide) is library of useful mathematical algorithms. It builds upon numpy.\n\nFor example, suppose you want to numerically calculate the integral \n$$\n\\int_0^1 x^3 dx.\n$$\n\nUsing scipy\n\n::: {.cell execution_count=15}\n\n::: {.cell-output .cell-output-stdout}\n```\n0.3333333333333333\n```\n:::\n:::\n\n\n::: {.callout-important}\n# Exercise\n\nUse scipy to numerically compute the integral\n$$\n\\int_0^1 \\sin(x) dx.\n$$\n:::\n\n\n\n\n###  Python libraries of interest to particular projects\n\n\n### Numerically solving differential equations (sci-py)\n \n#### ODEs\n\nSuppose we wish to solve the Lottka Volterra equations\n$$\n\\begin{aligned}\n\\frac{dn}{dt}&= n(1-p) \\\\\n\\frac{dp }{dt}&=\\alpha(n-1)\n\\end{aligned}\n$$\nwith initial conditions\n$$\nn(0)=2 \\quad p(0)=1.\n$$\n\n::: {.cell execution_count=16}\n\n::: {.cell-output .cell-output-display}\n![Numerically solving the Lotka Volterra ODEs.](Python_files/figure-pdf/fig-odes-output-1.pdf){#fig-odes}\n:::\n:::\n\n\n::: {.callout-important}\n# Exercise\n1. Plot the solution in the $np$ phase plane.\n2. Annotate the phase plane by plotting the steady state and nullclines.\n:::\n\n\n\n### Optimisation (scipy.optimise)\n\nSuppose we want to numerically estimate the local minima of the function\n$$\nf(x)=x^4-2x^2.\n$$\n\nWe can do this using the scipy-optimize function minimise.\n\n::: {.cell execution_count=17}\n\n::: {.cell-output .cell-output-stdout}\n```\n0.9999994698341323\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Finding local minima using scipy optimize.](Python_files/figure-pdf/fig-localmin-output-2.pdf){#fig-localmin}\n:::\n:::\n\n\n### Data analysis (pandas)\n\n[Pandas](https://pandas.pydata.org/docs/index.html) is the standard library for data analysis in Python.\n\nThe main datastructure is known as a *Dataframe*.\n\n\n\nTo view the first few rows of a dataframe use\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=tex}\n\\begin{tabular}{lrrrr}\n\\toprule\n{} &  A &   B &   C &   D \\\\\n\\midrule\n0 &  1 &   2 &   3 &   4 \\\\\n1 &  2 &   4 &   6 &   8 \\\\\n2 &  3 &   6 &   9 &  12 \\\\\n3 &  4 &   8 &  12 &  16 \\\\\n4 &  5 &  10 &  15 &  20 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nTo generate a quick summary use\n\n::: {.cell execution_count=20}\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=tex}\n\\begin{tabular}{lrrrr}\n\\toprule\n{} &         A &          B &          C &          D \\\\\n\\midrule\ncount &  5.000000 &   5.000000 &   5.000000 &   5.000000 \\\\\nmean  &  3.000000 &   6.000000 &   9.000000 &  12.000000 \\\\\nstd   &  1.581139 &   3.162278 &   4.743416 &   6.324555 \\\\\nmin   &  1.000000 &   2.000000 &   3.000000 &   4.000000 \\\\\n25\\%   &  2.000000 &   4.000000 &   6.000000 &   8.000000 \\\\\n50\\%   &  3.000000 &   6.000000 &   9.000000 &  12.000000 \\\\\n75\\%   &  4.000000 &   8.000000 &  12.000000 &  16.000000 \\\\\nmax   &  5.000000 &  10.000000 &  15.000000 &  20.000000 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nTo sort the data based upon values in a  column\n\n::: {.cell execution_count=21}\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=tex}\n\\begin{tabular}{lrrrr}\n\\toprule\n{} &  A &   B &   C &   D \\\\\n\\midrule\n0 &  1 &   2 &   3 &   4 \\\\\n1 &  2 &   4 &   6 &   8 \\\\\n2 &  3 &   6 &   9 &  12 \\\\\n3 &  4 &   8 &  12 &  16 \\\\\n4 &  5 &  10 &  15 &  20 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nTo view a single column, e.g. the C column use\n\n::: {.cell execution_count=22}\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &   C \\\\\n\\midrule\n0 &   3 \\\\\n1 &   6 \\\\\n2 &   9 \\\\\n3 &  12 \\\\\n4 &  15 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nTo use logical operators to filter data, e.g. to identify only rows where the $A$ column is positive\n\n::: {.cell execution_count=23}\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=tex}\n\\begin{tabular}{lrrrr}\n\\toprule\n{} &  A &   B &   C &   D \\\\\n\\midrule\n4 &  5 &  10 &  15 &  20 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nTo compute some basic statistics, e.g. the mean of each column\n\n::: {.cell execution_count=24}\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &     0 \\\\\n\\midrule\nA &   3.0 \\\\\nB &   6.0 \\\\\nC &   9.0 \\\\\nD &  12.0 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Writing your own scripts\n\nAt some point (either over the course of your project or later) you will likely encounter a  problem that cannot be solved using existing code libraries, i.e. you will need to write your own programmes. To prepare for this day, it is a good idea to practice your algorithm/code development skills on problems where the solutions are already known.\nFor example, could you write an algorithm that:\n\n * numerically solves the ODEs in @fig-odes.\n * finds the local minima in @fig-localmin.\n\n\nOver the course of the project assessment you will be asked about the methods that you have used in your project. You should be able to describe how the method works.\n\n It is much easier to defend the use of a method if you have a clear idea how to programme it; then the limitations of the method are much clearer. \n\n\n\n\n\n\n<!--\n\n\n#### PDEs\n\n[PyPDE](https://py-pde.readthedocs.io/en/latest/index.html) is a library of Python codes that use the finite difference method to numerically solve PDEs. \n\n::: {.cell execution_count=25}\n\n::: {.cell-output .cell-output-display}\n```\n  0%|          | 0/10.0 [00:00<?, ?it/s]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Python_files/figure-pdf/cell-26-output-2.pdf){}\n:::\n:::\n\n\n::: {.cell execution_count=26}\n\n::: {.cell-output .cell-output-display}\n```\nOutput()\n```\n:::\n:::\n\n\n### Image analysis (skikit-image)\n\n\n### Machine learning (tensorflow)\n\n\n\n\n-->\n\n",
    "supporting": [
      "Python_files/figure-pdf"
    ],
    "filters": []
  }
}