{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"File management\"\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "  pdf:\n",
        "    code-fold: true    \n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "889527ce"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "def ComputeSatisfaction(A_i,v_i):\n",
        "    S=100\n",
        "    for i in range(5):\n",
        "        if A_i[i]==v_i:\n",
        "            S=i\n",
        "\n",
        "    return S\n",
        "def ComputeOverallSatisfaction(A,v):\n",
        "\n",
        "    Overall_Satisfaction_Score=0.0\n",
        "    for i in range(A.shape[0]):\n",
        "        Overall_Satisfaction_Score+=ComputeSatisfaction(A[i,:],v[i])\n",
        "\n",
        "    supervisor_workload=True\n",
        "    if supervisor_workload:\n",
        "        df_sup_workload=ComputeSupervisorWorkload(df_project,v)\n",
        "        sup_workload=df_sup_workload['Num_projects'].to_numpy()\n",
        "        penalty_term=np.sum(sup_workload[sup_workload>2])\n",
        "        print(penalty_term)\n",
        "\n",
        "        workload_weighting=0.1\n",
        "        Overall_Satisfaction_Score+=workload_weighting*penalty_term\n",
        "\n",
        "    return Overall_Satisfaction_Score\n",
        "\n",
        "def perturb_assignment(v,non_assigned_projects):\n",
        "    v_perturb=v.copy()\n",
        "    non_assigned_projects_perturb=non_assigned_projects.copy()\n",
        "\n",
        "    uni_0_1=np.random.uniform()\n",
        "\n",
        "    if uni_0_1<0.5:\n",
        "        shuffle_method=1\n",
        "    else:\n",
        "        shuffle_method=2\n",
        "\n",
        "\n",
        "    if shuffle_method==1:\n",
        "\n",
        "        student_i=np.random.randint(0,len(v))\n",
        "        student_j=np.random.randint(0,len(v))     \n",
        "        v_perturb[student_i]=v[student_j]\n",
        "        v_perturb[student_j]=v[student_i]\n",
        "    else:\n",
        "        # Randomly select index for student and non assigned project\n",
        "        student_index=np.random.randint(0,len(v))\n",
        "        project_index=np.random.randint(0,len(non_assigned_projects))\n",
        "\n",
        "        # Swap student i project with one from unassigned list\n",
        "\n",
        "        \n",
        "        project_from_non_assigned=non_assigned_projects_perturb[project_index]\n",
        "        existing_project_st_i=v_perturb[student_index]\n",
        "\n",
        "        v_perturb[student_index]=project_from_non_assigned\n",
        "        # Pass student is project onto unassigned list\n",
        "        non_assigned_projects_perturb[project_index]=existing_project_st_i\n",
        "\n",
        "        #print(project_index)\n",
        "        #print(student_index)\n",
        "        #print(non_assigned_projects[project_index])\n",
        "        #print(v[student_index])\n",
        "\n",
        "\n",
        "    \n",
        "    return v_perturb,non_assigned_projects_perturb\n",
        "\n",
        "def Score_Assignment(A,v):\n",
        "\n",
        "    preference_hit=np.zeros((1,A.shape[1]),dtype=int)\n",
        "    print(preference_hit.shape)\n",
        "    for i in range(A.shape[0]):\n",
        "        for j in range(A.shape[1]):\n",
        "            if A[i,j]==v[i]:\n",
        "                preference_hit[0,j]+=1\n",
        "\n",
        "\n",
        "    return np.squeeze(preference_hit)\n",
        "\n",
        "def ComputeSupervisorWorkload(df_project,v):\n",
        "    # Loop over students\n",
        "\n",
        "    df_workload=pd.DataFrame(columns=['Supervisor','Num_projects'])\n",
        "\n",
        "    unique_supervisors=df_project['Supervisor'].unique()\n",
        "\n",
        "    df_workload['Supervisor']=pd.Series(unique_supervisors)\n",
        "    df_workload['Num_projects']=0\n",
        "\n",
        "    \n",
        "    \n",
        "\n",
        "    for i in range(len(v)):\n",
        "        project_i=v[i]\n",
        "\n",
        "    #    # Identify assigned project\n",
        "        supervisor=(df_project['Supervisor'][df_project['ID']==project_i])\n",
        "        supervisor=(np.squeeze(supervisor.to_numpy()))\n",
        "        num_existing_projects=df_workload['Num_projects'][df_workload['Supervisor']==supervisor]\n",
        "\n",
        "        \n",
        "        df_workload['Num_projects'][df_workload['Supervisor']==supervisor]+=1\n",
        "\n",
        "    return df_workload\n",
        "\n",
        "    # Find supervisor  for project\n",
        "\n",
        "    # Increment supervisor project count\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "use_data=2\n",
        "# Load preference matrix\n",
        "if use_data==1:\n",
        "    A=np.array([[1, 4, 6, 5, 1],[1, 4, 5, 2, 3],[2, 5, 6, 7, 22]])\n",
        "    num_students=A.shape[0]\n",
        "\n",
        "    assigned_projects=np.array([1,4,2])\n",
        "    non_assigned_projects=np.array([3,5,7,9,10,11,12,13])\n",
        "else:\n",
        "    str='../StudentPreferencesAY20242025-2.csv'\n",
        "    df=pd.read_csv(str)\n",
        "    A=df.iloc[:, 3:10]\n",
        "    A=A.to_numpy()\n",
        "    num_students=A.shape[0]\n",
        "\n",
        "    FirstName=df['FirstName']\n",
        "    SurName=df['Surname']\n",
        "\n",
        "    project_str='../projects.csv'\n",
        "    df_project=pd.read_csv(project_str)\n",
        "    project_inds=df_project.iloc[:, 0]\n",
        "    SupervisorName=df_project['Supervisor']\n",
        "\n",
        "    \n",
        "\n",
        "    project_inds=project_inds.to_numpy()\n",
        "    assert(len(np.unique(project_inds))==len(project_inds))\n",
        "    assigned_projects=np.random.choice(project_inds,num_students,replace=False)\n",
        "    non_assigned_projects=np.setdiff1d(project_inds,assigned_projects)\n",
        "    #assert(len(np.intersect(non_assigned_projects,assigned_projects))==0)\n",
        "\n",
        "\n",
        "\n",
        "i=2\n",
        "Satisfaction_Score=ComputeSatisfaction(A[2],assigned_projects[2])\n",
        "\n",
        "overall_satisfaction_Score=ComputeOverallSatisfaction(A,assigned_projects)\n",
        "\n",
        "\n",
        "# S\n",
        "max_Temp=10.0\n",
        "num_its=1000000\n",
        "it_vec=np.arange(num_its)\n",
        "Satisfation_score=np.zeros((num_its,1))\n",
        "Temp_profile=np.zeros_like(Satisfation_score)\n",
        "Temp_profile=max_Temp*(1-it_vec/(0.8*num_its))\n",
        "Temp_profile[Temp_profile<0.0]=0.001\n",
        "for it_ind in it_vec:\n",
        "\n",
        "    o_sat_sc=ComputeOverallSatisfaction(A,assigned_projects)\n",
        "\n",
        "    # Perturb v\n",
        "\n",
        "    v_perturb,non_assigned_projects_perturb=perturb_assignment(assigned_projects,non_assigned_projects)\n",
        "\n",
        "   \n",
        "    # Recompute overall_satisfaction\n",
        "\n",
        "    perturbed_o_sat_sc=ComputeOverallSatisfaction(A,v_perturb)\n",
        "    \n",
        "    do_print=False\n",
        "    if do_print==True:\n",
        "        print('Assignments')\n",
        "        print(assigned_projects)\n",
        "        print(v_perturb)\n",
        "        print('Scores:')\n",
        "        print(o_sat_sc)\n",
        "        print(perturbed_o_sat_sc)\n",
        "\n",
        "\n",
        "    # Accept with some prob\n",
        "\n",
        "    if perturbed_o_sat_sc<o_sat_sc:\n",
        "        assigned_projects=v_perturb\n",
        "        o_sat_sc=perturbed_o_sat_sc\n",
        "        non_assigned_projects=non_assigned_projects_perturb\n",
        "    else:\n",
        "        Delta_S=perturbed_o_sat_sc-o_sat_sc\n",
        "        Delta_S=Delta_S\n",
        "        T=Temp_profile[it_ind].astype(float)\n",
        "        prob_acc=np.exp(-1.0*Delta_S/T)\n",
        "        r=np.random.uniform()\n",
        "        if r<prob_acc:\n",
        "            assigned_projects=v_perturb\n",
        "            o_sat_sc=perturbed_o_sat_sc\n",
        "            non_assigned_projects=non_assigned_projects_perturb\n",
        "\n",
        "\n",
        "\n",
        "    # Record satisfaction score\n",
        "    Satisfation_score[it_ind]=o_sat_sc\n",
        "\n",
        "assigned_project_counts=Score_Assignment(A,assigned_projects)\n",
        "df_num_projects=ComputeSupervisorWorkload(df_project,assigned_projects)\n",
        "\n",
        "fig,ax=plt.subplots(2,2)\n",
        "ax[0,0].plot(Satisfation_score)\n",
        "ax[0,0].set_ylim([0, 30])\n",
        "ax[0,1].plot(Temp_profile)\n",
        "\n",
        "project_ind=np.arange(A.shape[1])\n",
        "ax[1,0].bar(project_ind,assigned_project_counts)\n",
        "\n",
        "#print(assigned_projects)\n",
        "assert(len(np.unique(assigned_projects))==len(assigned_projects))\n",
        "\n",
        "df_assigned_projects1=pd.DataFrame(columns=['FirstName','SurName','AssignedProject','Supervisor'])\n",
        "df_assigned_projects1['FirstName']=FirstName\n",
        "df_assigned_projects1['SurName']=SurName\n",
        "df_assigned_projects1['AssignedProject']=assigned_projects\n",
        "\n",
        "\n",
        "df_assigned_projects = pd.merge(left=df_assigned_projects1, right=df_project, left_on='AssignedProject', right_on='ID')"
      ],
      "id": "8607a920",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The students project preferences were:\n",
        "`{python} df.iloc[:, 1:6]`\n",
        "\n",
        "\n",
        "The project assignment to students is: \n",
        "`{python} df_assigned_projects.iloc[:,[0,1,2,4,5,6]]`\n",
        "\n",
        "The project assignment to students is: \n",
        "`{python} df_assigned_projects`\n",
        "\n",
        "\n",
        "The distribution of projects amongst staff is: \n",
        "`{python} df_num_projects`"
      ],
      "id": "a4628491"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/pmurray/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}